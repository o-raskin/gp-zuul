#   Application
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    authorizedRedirectUris:
      - http://localhost:4040/oauth2/redirect
server:
  port: 8099

company:
  domain:
    name: gmail.com

spring:
  application:
    name: zuul
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
  datasource:
#    todo: USE ANOTHER DB!!! THIS ONLY FOR START!!!
    url: jdbc:postgresql://localhost:5441/postgres
    username: postgres
    password:
security:
  oauth2:
    sso:
      login-path: /sessions/google
    client:
      client-id: 1474277588-78pkl6epmnpia0pql3c7ot753obmp6vp.apps.googleusercontent.com
      client-secret: 1N8KnD1Xf1uxWAtX4Ld4X0xL
      access-token-uri: https://oauth2.googleapis.com/token
      user-authorization-uri: https://accounts.google.com/o/oauth2/auth?hd=${company.domain.name}
      token-name: oauth_token
      authentication-scheme: query
      client-authentication-scheme: form
      scope:
        - profile
        - email
    resource:
      prefer-token-info: false
      user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo



#   Eureka
eureka:
  client:
    enabled: true
    fetch-registry: true
    registry-fetch-interval-seconds: 10
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    appname: zuul
    instance-id: zuul:${spring.application.instance-id:${random.value}}
    prefer-ip-address: true

  #   Allow use Spring Actuator with Spring Security
  #management:
  #  endpoints:
  #    web:
  #      exposure:
  #        include: *
  #      cors:
  #        allowed-headers: *
  #        allowed-methods: *
  #        allowed-origins: *
  #management.endpoints.web.cors.allow-credentials=true

#   UI
ui:
  client:
    http:
      home: http://localhost:4040/

